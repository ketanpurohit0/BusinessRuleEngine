bcpandas
pandas-datareader

<pyodbc->PostgreSQL: Returns json and arrays as 'strings'>
import pyodbc
conn_str = (\
    "DRIVER={PostgreSQL ANSI};"\
    "DATABASE=postgres;"\
    "UID=postgres;"\
    "PWD=*secret*;"\
    "SERVER=localhost;"\
    "PORT=5432;"\
    )
conn = pyodbc.connect(conn_str)
crsr = conn.execute("SELECT * FROM FOO limit 50")
row = crsr.fetchone()
print(row)
crsr.close()
conn.close()

<SQLAlchemy->PostgreSQL : Works correctly with json (->map) and arrays (->list) >
import sqlalchemy
conn_str="postgresql+psycopg2://postgres:*secret*@localhost/postgres"
engine = sqlalchemy.create_engine(conn_str)
conn=engine.connect()
result=conn.execute('SELECT * FROM Foo')
result.keys()
for r in result:
    print(r)
    for i in r:
        print(type(i))
		
<SQLAlchemy->PostgreSQL : Works correctly with json and arrays>
import sqlalchemy
conn_str="postgresql://postgres:*secret*@localhost/postgres"
engine = sqlalchemy.create_engine(conn_str)
conn=engine.connect()
result=conn.execute('SELECT * FROM Foo')
result.keys()
for r in result:
    print(r)
    for i in r:
        print(type(i))

<SQLAlchemy->PostgreSQL : Works correctly with json and arrays>		
import sqlalchemy
conn_str="postgresql+pg8000//postgres:*secret*@localhost/postgres"
engine = sqlalchemy.create_engine(conn_str)
conn=engine.connect()
result=conn.execute('SELECT * FROM Foo')
result.keys()
for r in result:
    print(r)
    for i in r:
        print(type(i))